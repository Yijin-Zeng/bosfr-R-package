
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "bosfr"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "bosfr-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('bosfr')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("boundsKendall")
> ### * boundsKendall
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: boundsKendall
> ### Title: Bounds of Kendall's tau in the Presence of Missing Data
> ### Aliases: boundsKendall
> 
> ### ** Examples
> 
> ### compute bounds of Kendall's tau between incomplete ranked lists
> X <- c(1, 2, NA, 4, 3)
> Y <- c(3, NA, 4, 2, 1)
> boundsKendall(X, Y)
$bounds
[1]  3 12

$bounds.scaled
[1] -1.0  0.4

> 
> ### compute bounds of Kendall's tau between incomplete vectors of distinct data
> X <- c(1.3, 2.6, NA, 4.2, 3.5)
> Y <- c(5.5, NA, 6.5, 2.6, 1.1)
> boundsKendall(X, Y)
$bounds
[1]  3 12

$bounds.scaled
[1] -1.0  0.4

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("boundsKendall", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("boundsSFR")
> ### * boundsSFR
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: boundsSFR
> ### Title: Exact bounds of Spearman's footrule in the Presence of Missing
> ###   Data
> ### Aliases: boundsSFR
> 
> ### ** Examples
> 
> ### compute exact bounds of Spearman's footrule between incomplete ranked lists
> X <- c(1, 2, NA, 4, 3)
> Y <- c(3, NA, 4, 2, 1)
> boundsSFR(X, Y, pval=FALSE)
$bounds
[1]  6 12

$bounds.scaled
[1] -0.50  0.25

> 
> ### compute exact bounds of Spearman's footrule between incomplete vectors of distinct data, and perform independence test
> X <- c(1.3, 2.6, NA, 4.2, 3.5)
> Y <- c(5.5, NA, 6.5, 2.6, 1.1)
> boundsSFR(X, Y, pval=TRUE)
$bounds
[1]  6 12

$bounds.scaled
[1] -0.50  0.25

$pvalue
[1] 1

$bounds.pvalue
[1] 0.1197949 1.0000000

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("boundsSFR", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.059 0.003 0.07 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
