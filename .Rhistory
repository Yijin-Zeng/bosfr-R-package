if(n_prime != n){
n_1 = n - n_prime
m_1 = m
}else if( (n_prime == n)&(m_prime != m) ){
n_1 = n
m_1 = m - m_prime
}
mu_1 = n_1*m_1/2 + W_prime
sigma_1 = sqrt(n_1*m_1*(n_1+m_1+1)/12)
left_rejection_probability <- pnorm(left_rejection_threshold, mu_1, sigma_1)
right_rejection_probability <- 1 - pnorm(right_rejection_threshold, mu_1, sigma_1)
print(left_rejection_probability)
print(right_rejection_probability)
if ((left_rejection_probability > beta) | (right_rejection_probability > beta)){
# reject
return(1)
}else{
return(0)
}
}
n <- 1000
m <- 1000
n_prime <- 90
m_prime <- 90
X_prime <- rnorm(n_prime, 1, 1)
Y_prime <- rnorm(m_prime, 0, 1)
alpha <- 0.05
beta <- 0.9
stocastically_rank_curtailing(X_prime, Y_prime, n, m, alpha, beta)
stocastically_rank_curtailing <- function(X_prime, Y_prime, n, m, alpha, beta){
# X_prime, Y_prime: observed values from X and Y, respectively
# n,m: sample sizes of X and Y
# alpha: significance level for the testing
# beta: reject when the probability falling into rejecting region larger than beta
### decide rejection region according to n,m and alpha
mu = n*m/2
sigma = sqrt(n*m*(n+m+1)/12)
left_rejection_threshold <- qnorm(p = (alpha/2), mean = mu, sd = sigma)
right_rejection_threshold <- qnorm(p = (1 - alpha/2), mean = mu, sd = sigma)
### compute the probability falling into rejection region
W_prime <- wilcox.test(X_prime, Y_prime)$statistic
n_prime <- length(X_prime)
m_prime <- length(Y_prime)
if(n_prime != n){
n_1 = n - n_prime
m_1 = m
}else if( (n_prime == n)&(m_prime != m) ){
n_1 = n
m_1 = m - m_prime
}
mu_1 = n_1*m_1/2 + W_prime
sigma_1 = sqrt(n_1*m_1*(n_1+m_1+1)/12)
left_rejection_probability <- pnorm(left_rejection_threshold, mu_1, sigma_1)
right_rejection_probability <- 1 - pnorm(right_rejection_threshold, mu_1, sigma_1)
print(left_rejection_probability)
print(right_rejection_probability)
if ((left_rejection_probability > beta) | (right_rejection_probability > beta)){
# reject
return(1)
}else{
return(0)
}
}
n <- 1000
m <- 1000
n_prime <- 90
m_prime <- 90
X_prime <- rnorm(n_prime, 1, 1)
Y_prime <- rnorm(m_prime, 0, 1)
alpha <- 0.05
beta <- 0.9
stocastically_rank_curtailing(X_prime, Y_prime, n, m, alpha, beta)
stocastically_rank_curtailing <- function(X_prime, Y_prime, n, m, alpha, beta){
# X_prime, Y_prime: observed values from X and Y, respectively
# n,m: sample sizes of X and Y
# alpha: significance level for the testing
# beta: reject when the probability falling into rejecting region larger than beta
### decide rejection region according to n,m and alpha
mu = n*m/2
sigma = sqrt(n*m*(n+m+1)/12)
left_rejection_threshold <- qnorm(p = (alpha/2), mean = mu, sd = sigma)
right_rejection_threshold <- qnorm(p = (1 - alpha/2), mean = mu, sd = sigma)
### compute the probability falling into rejection region
W_prime <- wilcox.test(X_prime, Y_prime)$statistic
n_prime <- length(X_prime)
m_prime <- length(Y_prime)
if(n_prime != n){
n_1 = n - n_prime
m_1 = m
}else if( (n_prime == n)&(m_prime != m) ){
n_1 = n
m_1 = m - m_prime
}
mu_1 = n_1*m_1/2 + W_prime
sigma_1 = sqrt(n_1*m_1*(n_1+m_1+1)/12)
left_rejection_probability <- pnorm(left_rejection_threshold, mu_1, sigma_1)
right_rejection_probability <- 1 - pnorm(right_rejection_threshold, mu_1, sigma_1)
print(left_rejection_probability)
print(right_rejection_probability)
if ((left_rejection_probability > beta) | (right_rejection_probability > beta)){
# reject
return(1)
}else{
return(0)
}
}
n <- 1000
m <- 1000
n_prime <- 90
m_prime <- 90
X_prime <- rnorm(n_prime, 1, 1)
Y_prime <- rnorm(m_prime, 0, 1)
alpha <- 0.05
beta <- 0.9
stocastically_rank_curtailing(X_prime, Y_prime, n, m, alpha, beta)
stocastically_rank_curtailing <- function(X_prime, Y_prime, n, m, alpha, beta){
# X_prime, Y_prime: observed values from X and Y, respectively
# n,m: sample sizes of X and Y
# alpha: significance level for the testing
# beta: reject when the probability falling into rejecting region larger than beta
### decide rejection region according to n,m and alpha
mu = n*m/2
sigma = sqrt(n*m*(n+m+1)/12)
left_rejection_threshold <- qnorm(p = (alpha/2), mean = mu, sd = sigma)
right_rejection_threshold <- qnorm(p = (1 - alpha/2), mean = mu, sd = sigma)
### compute the probability falling into rejection region
W_prime <- wilcox.test(X_prime, Y_prime)$statistic
n_prime <- length(X_prime)
m_prime <- length(Y_prime)
if(n_prime != n){
n_1 = n - n_prime
m_1 = m
}else if( (n_prime == n)&(m_prime != m) ){
n_1 = n
m_1 = m - m_prime
}
mu_1 = n_1*m_1/2 + W_prime
sigma_1 = sqrt(n_1*m_1*(n_1+m_1+1)/12)
left_rejection_probability <- pnorm(left_rejection_threshold, mu_1, sigma_1)
right_rejection_probability <- 1 - pnorm(right_rejection_threshold, mu_1, sigma_1)
print(left_rejection_probability)
print(right_rejection_probability)
if ((left_rejection_probability > beta) | (right_rejection_probability > beta)){
# reject
return(1)
}else{
return(0)
}
}
n <- 1000
m <- 1000
n_prime <- 90
m_prime <- 90
X_prime <- rnorm(n_prime, 1, 1)
Y_prime <- rnorm(m_prime, 0, 1)
alpha <- 0.05
beta <- 0.9
stocastically_rank_curtailing(X_prime, Y_prime, n, m, alpha, beta)
stocastically_rank_curtailing <- function(X_prime, Y_prime, n, m, alpha, beta){
# X_prime, Y_prime: observed values from X and Y, respectively
# n,m: sample sizes of X and Y
# alpha: significance level for the testing
# beta: reject when the probability falling into rejecting region larger than beta
### decide rejection region according to n,m and alpha
mu = n*m/2
sigma = sqrt(n*m*(n+m+1)/12)
left_rejection_threshold <- qnorm(p = (alpha/2), mean = mu, sd = sigma)
right_rejection_threshold <- qnorm(p = (1 - alpha/2), mean = mu, sd = sigma)
### compute the probability falling into rejection region
W_prime <- wilcox.test(X_prime, Y_prime)$statistic
n_prime <- length(X_prime)
m_prime <- length(Y_prime)
if(n_prime != n){
n_1 = n - n_prime
m_1 = m
}else if( (n_prime == n)&(m_prime != m) ){
n_1 = n
m_1 = m - m_prime
}
mu_1 = n_1*m_1/2 + W_prime
sigma_1 = sqrt(n_1*m_1*(n_1+m_1+1)/12)
left_rejection_probability <- pnorm(left_rejection_threshold, mu_1, sigma_1)
right_rejection_probability <- 1 - pnorm(right_rejection_threshold, mu_1, sigma_1)
print(left_rejection_probability)
print(right_rejection_probability)
if ((left_rejection_probability > beta) | (right_rejection_probability > beta)){
# reject
return(1)
}else{
return(0)
}
}
n <- 1000
m <- 1000
n_prime <- 90
m_prime <- 90
X_prime <- rnorm(n_prime, 1, 1)
Y_prime <- rnorm(m_prime, 0, 1)
alpha <- 0.05
beta <- 0.9
stocastically_rank_curtailing(X_prime, Y_prime, n, m, alpha, beta)
stocastically_rank_curtailing <- function(X_prime, Y_prime, n, m, alpha, beta){
# X_prime, Y_prime: observed values from X and Y, respectively
# n,m: sample sizes of X and Y
# alpha: significance level for the testing
# beta: reject when the probability falling into rejecting region larger than beta
### decide rejection region according to n,m and alpha
mu = n*m/2
sigma = sqrt(n*m*(n+m+1)/12)
left_rejection_threshold <- qnorm(p = (alpha/2), mean = mu, sd = sigma)
right_rejection_threshold <- qnorm(p = (1 - alpha/2), mean = mu, sd = sigma)
### compute the probability falling into rejection region
W_prime <- wilcox.test(X_prime, Y_prime)$statistic
n_prime <- length(X_prime)
m_prime <- length(Y_prime)
if(n_prime != n){
n_1 = n - n_prime
m_1 = m
}else if( (n_prime == n)&(m_prime != m) ){
n_1 = n
m_1 = m - m_prime
}
mu_1 = n_1*m_1/2 + W_prime
sigma_1 = sqrt(n_1*m_1*(n_1+m_1+1)/12)
left_rejection_probability <- pnorm(left_rejection_threshold, mu_1, sigma_1)
right_rejection_probability <- 1 - pnorm(right_rejection_threshold, mu_1, sigma_1)
print(left_rejection_probability)
print(right_rejection_probability)
if ((left_rejection_probability > beta) | (right_rejection_probability > beta)){
# reject
return(1)
}else{
return(0)
}
}
n <- 1000
m <- 1000
n_prime <- 90
m_prime <- 90
X_prime <- rnorm(n_prime, 1, 1)
Y_prime <- rnorm(m_prime, 0, 1)
alpha <- 0.05
beta <- 0.9
stocastically_rank_curtailing(X_prime, Y_prime, n, m, alpha, beta)
stocastically_rank_curtailing <- function(X_prime, Y_prime, n, m, alpha, beta){
# X_prime, Y_prime: observed values from X and Y, respectively
# n,m: sample sizes of X and Y
# alpha: significance level for the testing
# beta: reject when the probability falling into rejecting region larger than beta
### decide rejection region according to n,m and alpha
mu = n*m/2
sigma = sqrt(n*m*(n+m+1)/12)
left_rejection_threshold <- qnorm(p = (alpha/2), mean = mu, sd = sigma)
right_rejection_threshold <- qnorm(p = (1 - alpha/2), mean = mu, sd = sigma)
### compute the probability falling into rejection region
W_prime <- wilcox.test(X_prime, Y_prime)$statistic
n_prime <- length(X_prime)
m_prime <- length(Y_prime)
if(n_prime != n){
n_1 = n - n_prime
m_1 = m
}else if( (n_prime == n)&(m_prime != m) ){
n_1 = n
m_1 = m - m_prime
}
mu_1 = n_1*m_1/2 + W_prime
sigma_1 = sqrt(n_1*m_1*(n_1+m_1+1)/12)
left_rejection_probability <- pnorm(left_rejection_threshold, mu_1, sigma_1)
right_rejection_probability <- 1 - pnorm(right_rejection_threshold, mu_1, sigma_1)
print(left_rejection_probability)
print(right_rejection_probability)
if ((left_rejection_probability > beta) | (right_rejection_probability > beta)){
# reject
return(1)
}else{
return(0)
}
}
n <- 1000
m <- 1000
n_prime <- 90
m_prime <- 90
X_prime <- rnorm(n_prime, 1, 1)
Y_prime <- rnorm(m_prime, 0, 1)
alpha <- 0.05
beta <- 0.9
stocastically_rank_curtailing(X_prime, Y_prime, n, m, alpha, beta)
stocastically_rank_curtailing <- function(X_prime, Y_prime, n, m, alpha, beta){
# X_prime, Y_prime: observed values from X and Y, respectively
# n,m: sample sizes of X and Y
# alpha: significance level for the testing
# beta: reject when the probability falling into rejecting region larger than beta
### decide rejection region according to n,m and alpha
mu = n*m/2
sigma = sqrt(n*m*(n+m+1)/12)
left_rejection_threshold <- qnorm(p = (alpha/2), mean = mu, sd = sigma)
right_rejection_threshold <- qnorm(p = (1 - alpha/2), mean = mu, sd = sigma)
### compute the probability falling into rejection region
W_prime <- wilcox.test(X_prime, Y_prime)$statistic
n_prime <- length(X_prime)
m_prime <- length(Y_prime)
if(n_prime != n){
n_1 = n - n_prime
m_1 = m
}else if( (n_prime == n)&(m_prime != m) ){
n_1 = n
m_1 = m - m_prime
}
mu_1 = n_1*m_1/2 + W_prime
sigma_1 = sqrt(n_1*m_1*(n_1+m_1+1)/12)
left_rejection_probability <- pnorm(left_rejection_threshold, mu_1, sigma_1)
right_rejection_probability <- 1 - pnorm(right_rejection_threshold, mu_1, sigma_1)
print(left_rejection_probability)
print(right_rejection_probability)
if ((left_rejection_probability > beta) | (right_rejection_probability > beta)){
# reject
return(1)
}else{
return(0)
}
}
n <- 1000
m <- 1000
n_prime <- 90
m_prime <- 90
X_prime <- rnorm(n_prime, 1, 1)
Y_prime <- rnorm(m_prime, 0, 1)
alpha <- 0.05
beta <- 0.9
stocastically_rank_curtailing(X_prime, Y_prime, n, m, alpha, beta)
stocastically_rank_curtailing <- function(X_prime, Y_prime, n, m, alpha, beta){
# X_prime, Y_prime: observed values from X and Y, respectively
# n,m: sample sizes of X and Y
# alpha: significance level for the testing
# beta: reject when the probability falling into rejecting region larger than beta
### decide rejection region according to n,m and alpha
mu = n*m/2
sigma = sqrt(n*m*(n+m+1)/12)
left_rejection_threshold <- qnorm(p = (alpha/2), mean = mu, sd = sigma)
right_rejection_threshold <- qnorm(p = (1 - alpha/2), mean = mu, sd = sigma)
### compute the probability falling into rejection region
W_prime <- wilcox.test(X_prime, Y_prime)$statistic
n_prime <- length(X_prime)
m_prime <- length(Y_prime)
if(n_prime != n){
n_1 = n - n_prime
m_1 = m
}else if( (n_prime == n)&(m_prime != m) ){
n_1 = n
m_1 = m - m_prime
}
mu_1 = n_1*m_1/2 + W_prime
sigma_1 = sqrt(n_1*m_1*(n_1+m_1+1)/12)
left_rejection_probability <- pnorm(left_rejection_threshold, mu_1, sigma_1)
right_rejection_probability <- 1 - pnorm(right_rejection_threshold, mu_1, sigma_1)
print(left_rejection_probability)
print(right_rejection_probability)
if ((left_rejection_probability > beta) | (right_rejection_probability > beta)){
# reject
return(1)
}else{
return(0)
}
}
n <- 1000
m <- 1000
n_prime <- 90
m_prime <- 90
X_prime <- rnorm(n_prime, 1, 1)
Y_prime <- rnorm(m_prime, 0, 1)
alpha <- 0.05
beta <- 0.9
stocastically_rank_curtailing(X_prime, Y_prime, n, m, alpha, beta)
stocastically_rank_curtailing <- function(X_prime, Y_prime, n, m, alpha, beta){
# X_prime, Y_prime: observed values from X and Y, respectively
# n,m: sample sizes of X and Y
# alpha: significance level for the testing
# beta: reject when the probability falling into rejecting region larger than beta
### decide rejection region according to n,m and alpha
mu = n*m/2
sigma = sqrt(n*m*(n+m+1)/12)
left_rejection_threshold <- qnorm(p = (alpha/2), mean = mu, sd = sigma)
right_rejection_threshold <- qnorm(p = (1 - alpha/2), mean = mu, sd = sigma)
### compute the probability falling into rejection region
W_prime <- wilcox.test(X_prime, Y_prime)$statistic
n_prime <- length(X_prime)
m_prime <- length(Y_prime)
if(n_prime != n){
n_1 = n - n_prime
m_1 = m
}else if( (n_prime == n)&(m_prime != m) ){
n_1 = n
m_1 = m - m_prime
}
mu_1 = n_1*m_1/2 + W_prime
sigma_1 = sqrt(n_1*m_1*(n_1+m_1+1)/12)
left_rejection_probability <- pnorm(left_rejection_threshold, mu_1, sigma_1)
right_rejection_probability <- 1 - pnorm(right_rejection_threshold, mu_1, sigma_1)
print(left_rejection_probability)
print(right_rejection_probability)
if ((left_rejection_probability > beta) | (right_rejection_probability > beta)){
# reject
return(1)
}else{
return(0)
}
}
n <- 1000
m <- 1000
n_prime <- 90
m_prime <- 90
X_prime <- rnorm(n_prime, 1, 1)
Y_prime <- rnorm(m_prime, 0, 1)
alpha <- 0.05
beta <- 0.9
stocastically_rank_curtailing(X_prime, Y_prime, n, m, alpha, beta)
stocastically_rank_curtailing <- function(X_prime, Y_prime, n, m, alpha, beta){
# X_prime, Y_prime: observed values from X and Y, respectively
# n,m: sample sizes of X and Y
# alpha: significance level for the testing
# beta: reject when the probability falling into rejecting region larger than beta
### decide rejection region according to n,m and alpha
mu = n*m/2
sigma = sqrt(n*m*(n+m+1)/12)
left_rejection_threshold <- qnorm(p = (alpha/2), mean = mu, sd = sigma)
right_rejection_threshold <- qnorm(p = (1 - alpha/2), mean = mu, sd = sigma)
### compute the probability falling into rejection region
W_prime <- wilcox.test(X_prime, Y_prime)$statistic
n_prime <- length(X_prime)
m_prime <- length(Y_prime)
if(n_prime != n){
n_1 = n - n_prime
m_1 = m
}else if( (n_prime == n)&(m_prime != m) ){
n_1 = n
m_1 = m - m_prime
}
mu_1 = n_1*m_1/2 + W_prime
sigma_1 = sqrt(n_1*m_1*(n_1+m_1+1)/12)
left_rejection_probability <- pnorm(left_rejection_threshold, mu_1, sigma_1)
right_rejection_probability <- 1 - pnorm(right_rejection_threshold, mu_1, sigma_1)
print(left_rejection_probability)
print(right_rejection_probability)
if ((left_rejection_probability > beta) | (right_rejection_probability > beta)){
# reject
return(1)
}else{
return(0)
}
}
n <- 1000
m <- 1000
n_prime <- 90
m_prime <- 90
X_prime <- rnorm(n_prime, 10, 1)
Y_prime <- rnorm(m_prime, 0, 1)
alpha <- 0.05
beta <- 0.9
stocastically_rank_curtailing(X_prime, Y_prime, n, m, alpha, beta)
View(stocastically_rank_curtailing)
library('devtools')
setwd("/Users/yz720/Documents/Spearman-Footrule-Paper/R_package")
create_package("~")
create_package(".")
setwd("~/Documents/wmwm/R_code")
setwd("/Users/yz720/Documents/Spearman-Footrule-Paper/BORC")
create_package(".")
load_all()
load_all()
library('devtools')
load_all()
library('devtools')
load_all()
load_all()
Theoretical_Upper <- ComputeUpperBoundGeneralMissing(X,Y)
build()
load_all()
load_all()
load_all()
check()
use_mit_license()
check()
?pnorm
install.packages("gtools")
load_all()
check()
usethis::use_package("stats")
check()
usethis::use_package("rlang")
load_all()
build()
check()
usethis::use_package("gtools")
check()
usethis::edit_r_environ()
library(devtools)
document
document()
check()
check()
library(devtools)
document()
check()
library(devtools)
load_all()
check()
use_gpl3_license()
check()
check()
use_gpl3_license()
check()
check()
